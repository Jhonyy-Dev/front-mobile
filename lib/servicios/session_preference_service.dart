import 'package:shared_preferences/shared_preferences.dart';

class SessionPreferenceService {
  static const String _keyLastManualChoice = 'last_manual_session_choice';
  
  /// Guardar la elecci√≥n manual del usuario (solo cuando hace login)
  static Future<void> saveUserManualChoice(String section) async {
    try {
      print('üîÑ INICIANDO GUARDADO: $section');
      final prefs = await SharedPreferences.getInstance();
      
      // Guardar con m√∫ltiples claves para asegurar persistencia
      await prefs.setString(_keyLastManualChoice, section);
      await prefs.setString('user_last_choice', section); // Clave alternativa
      await prefs.setInt('choice_timestamp', DateTime.now().millisecondsSinceEpoch);
      
      // Verificar que se guard√≥ correctamente
      final verificacion = prefs.getString(_keyLastManualChoice);
      final verificacion2 = prefs.getString('user_last_choice');
      
      print('üéØ GUARDADO EXITOSO:');
      print('   Secci√≥n: $section');
      print('   Verificaci√≥n 1: $verificacion');
      print('   Verificaci√≥n 2: $verificacion2');
      print('   Timestamp: ${DateTime.now().millisecondsSinceEpoch}');
      
      if (verificacion != section) {
        throw Exception('FALLO EN VERIFICACI√ìN: No se guard√≥ correctamente');
      }
    } catch (e) {
      print('‚ùå ERROR CR√çTICO guardando elecci√≥n manual: $e');
      // Intentar m√©todo alternativo
      try {
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('backup_choice', section);
        print('üíæ Guardado en clave de respaldo');
      } catch (e2) {
        print('‚ùå FALLO TOTAL: $e2');
      }
    }
  }
  
  /// Obtener la √∫ltima elecci√≥n manual del usuario
  static Future<String?> getUserManualChoice() async {
    try {
      print('üîç INICIANDO LECTURA de elecci√≥n manual...');
      final prefs = await SharedPreferences.getInstance();
      
      // Intentar leer de m√∫ltiples claves
      final choice1 = prefs.getString(_keyLastManualChoice);
      final choice2 = prefs.getString('user_last_choice');
      final backup = prefs.getString('backup_choice');
      final timestamp = prefs.getInt('choice_timestamp');
      
      print('üìä RESULTADOS DE LECTURA:');
      print('   Clave principal: $choice1');
      print('   Clave alternativa: $choice2');
      print('   Clave respaldo: $backup');
      print('   Timestamp: $timestamp');
      
      // Usar la primera que no sea null
      final finalChoice = choice1 ?? choice2 ?? backup;
      print('üìñ ELECCI√ìN FINAL: $finalChoice');
      
      return finalChoice;
    } catch (e) {
      print('‚ùå Error leyendo elecci√≥n manual: $e');
      return null;
    }
  }
  
  /// Limpiar la elecci√≥n manual (cuando el usuario hace logout)
  static Future<void> clearUserManualChoice() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_keyLastManualChoice);
      print('üóëÔ∏è Elecci√≥n manual limpiada');
    } catch (e) {
      print('‚ùå Error limpiando elecci√≥n manual: $e');
    }
  }
  
  /// Verificar si hay sesiones activas
  static Future<Map<String, bool>> checkActiveSessions() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      final usuarioData = prefs.getString('usuario');
      final token = prefs.getString('token');
      final usuarioMedicalData = prefs.getString('usuario_medical');
      final tokenMedical = prefs.getString('token_medical');
      
      final hasMigration = usuarioData != null && token != null && 
                          usuarioData.isNotEmpty && token.isNotEmpty;
      final hasMedical = usuarioMedicalData != null && tokenMedical != null && 
                        usuarioMedicalData.isNotEmpty && tokenMedical.isNotEmpty;
      
      print('üîç SESIONES ACTIVAS:');
      print('   Migration: $hasMigration');
      print('   Medical: $hasMedical');
      
      return {
        'migration': hasMigration,
        'medical': hasMedical,
      };
    } catch (e) {
      print('‚ùå Error verificando sesiones: $e');
      return {'migration': false, 'medical': false};
    }
  }
}
