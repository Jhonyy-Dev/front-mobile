import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../baseUrl.dart';
import 'preference_usuario.dart';

class NotificacionesServicio {
  static final NotificacionesServicio _instance = NotificacionesServicio._internal();
  factory NotificacionesServicio() => _instance;
  NotificacionesServicio._internal();

  // Canal para comunicaci√≥n con notificaciones nativas (futuro uso)
  // static const MethodChannel _channel = MethodChannel('awesome_notifications_channel');

  // Inicializar las notificaciones
  static Future<void> inicializar() async {
    try {
      // Implementaci√≥n b√°sica sin dependencias externas
      print('üîî Sistema de notificaciones inicializado correctamente');
      await solicitarPermisos();
    } catch (e) {
      print('Error al inicializar notificaciones: $e');
    }
  }

  // Solicitar permisos
  static Future<bool> solicitarPermisos() async {
    try {
      // Simulaci√≥n de solicitud de permisos
      print('üîî Permisos de notificaciones concedidos');
      return true;
    } catch (e) {
      print('Error al solicitar permisos: $e');
      return false;
    }
  }

  // Verificar si es cumplea√±os y programar notificaci√≥n
  static Future<void> verificarCumpleanos() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final fechaNacimiento = prefs.getString('fecha_nacimiento');
      
      if (fechaNacimiento != null && fechaNacimiento.isNotEmpty) {
        final DateTime fechaNac = DateTime.parse(fechaNacimiento);
        final DateTime hoy = DateTime.now();
        
        // Verificar si hoy es su cumplea√±os (d√≠a y mes coinciden)
        if (fechaNac.day == hoy.day && fechaNac.month == hoy.month) {
          await _enviarNotificacionCumpleanos();
          await _marcarCumpleanosNotificado();
        }
      }
    } catch (e) {
      print('Error al verificar cumplea√±os: $e');
    }
  }

  // Enviar notificaci√≥n de cumplea√±os
  static Future<void> _enviarNotificacionCumpleanos() async {
    final prefs = await SharedPreferences.getInstance();
    final yaNotificado = prefs.getBool('cumpleanos_notificado_${DateTime.now().year}') ?? false;
    
    // Solo enviar si no se ha notificado este a√±o
    if (!yaNotificado) {
      try {
        print('üéâ ENVIANDO NOTIFICACI√ìN DE CUMPLEA√ëOS VIA BACKEND...');
        
        // Obtener ID del usuario
        final userId = prefs.getInt('user_id');
        if (userId == null) {
          print('‚ö†Ô∏è No se encontr√≥ ID de usuario');
          return;
        }
        
        // Llamar al endpoint del backend
        final url = Uri.parse('$baseUrl/fcm/verificar-cumpleanos');
        final response = await http.post(
          url,
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          body: json.encode({
            'user_id': userId,
          }),
        );
        
        print('üì± Respuesta del backend: ${response.statusCode}');
        
        if (response.statusCode == 200) {
          final data = json.decode(response.body);
          if (data['success'] == true) {
            print('‚úÖ Notificaci√≥n de cumplea√±os enviada exitosamente via FCM');
            // Marcar como notificado
            await _marcarCumpleanosNotificado();
          } else {
            print('‚ùå Error en backend: ${data['message']}');
          }
        } else {
          print('‚ùå Error HTTP: ${response.statusCode}');
        }
      } catch (e) {
        print('Error al enviar notificaci√≥n: $e');
      }
    }
  }

  // Marcar que ya se notific√≥ el cumplea√±os este a√±o
  static Future<void> _marcarCumpleanosNotificado() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('cumpleanos_notificado_${DateTime.now().year}', true);
  }

  // Verificar si hoy es cumplea√±os (para mostrar banner en la app)
  static Future<bool> esCumpleanosHoy() async {
    try {
      print('üîç INICIANDO VERIFICACI√ìN DE CUMPLEA√ëOS...');
      
      // Obtener datos del usuario usando el servicio correcto
      final userData = await obtenerDatosUsuario();
      
      if (userData != null && userData['usuario'] != null) {
        final usuario = userData['usuario'];
        final fechaNacimiento = usuario['fecha_nacimiento'];
        
        print('üìÖ Datos del usuario obtenidos:');
        print('üìÖ Fecha de nacimiento: $fechaNacimiento');
        
        if (fechaNacimiento != null && fechaNacimiento.toString().isNotEmpty) {
          final DateTime fechaNac = DateTime.parse(fechaNacimiento.toString());
          final DateTime hoy = DateTime.now();
          
          print('üìÖ Fecha nacimiento: ${fechaNac.day}/${fechaNac.month}/${fechaNac.year}');
          print('üìÖ Fecha hoy: ${hoy.day}/${hoy.month}/${hoy.year}');
          
          final esCumpleanos = fechaNac.day == hoy.day && fechaNac.month == hoy.month;
          print('üéâ ¬øEs cumplea√±os? $esCumpleanos');
          
          if (esCumpleanos) {
            print('üéÇ ¬°¬°¬°ES CUMPLEA√ëOS!!! Enviando notificaci√≥n...');
            await _enviarNotificacionCumpleanos();
          }
          
          return esCumpleanos;
        }
      }
      
      print('‚ö†Ô∏è No se encontraron datos de usuario o fecha de nacimiento');
      return false;
    } catch (e) {
      print('‚ùå Error al verificar si es cumplea√±os: $e');
      return false;
    }
  }

  // Programar verificaci√≥n diaria de cumplea√±os
  static Future<void> programarVerificacionDiaria() async {
    try {
      print('üîî Verificaci√≥n diaria de cumplea√±os programada');
      // En una implementaci√≥n real, aqu√≠ se programar√≠a la verificaci√≥n
    } catch (e) {
      print('Error al programar verificaci√≥n: $e');
    }
  }

  // Configurar listeners
  static Future<void> configurarListeners() async {
    try {
      print('üîî Listeners de notificaciones configurados');
      // En una implementaci√≥n real, aqu√≠ se configurar√≠an los listeners
    } catch (e) {
      print('Error al configurar listeners: $e');
    }
  }

  // FUNCI√ìN DE PRUEBA: Enviar notificaci√≥n desde Flutter
  static Future<void> enviarNotificacionPrueba() async {
    try {
      print('üß™ ENVIANDO NOTIFICACI√ìN DE PRUEBA DESDE FLUTTER...');
      
      final prefs = await SharedPreferences.getInstance();
      final userId = prefs.getInt('user_id') ?? 10;
      
      final url = Uri.parse('$baseUrl/fcm/enviar-notificacion');
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: json.encode({
          'user_ids': [userId],
          'titulo': 'üß™ Prueba Celular F√≠sico',
          'mensaje': '¬°Notificaci√≥n de prueba en dispositivo real!',
        }),
      );
      
      print('üì± Respuesta: ${response.statusCode}');
      print('üì± Cuerpo: ${response.body}');
      
    } catch (e) {
      print('‚ùå Error: $e');
    }
  }
}
