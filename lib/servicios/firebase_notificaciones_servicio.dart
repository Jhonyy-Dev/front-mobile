import 'dart:async';
import 'dart:convert';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import '../baseUrl.dart';
import 'notificaciones_servicio.dart';

class FirebaseNotificacionesServicio {
  static final FirebaseNotificacionesServicio _instance = FirebaseNotificacionesServicio._internal();
  factory FirebaseNotificacionesServicio() => _instance;
  FirebaseNotificacionesServicio._internal();

  static FirebaseMessaging? _messaging;
  static String? _token;
  static FlutterLocalNotificationsPlugin? _localNotifications;

  /// Inicializar Firebase y configurar notificaciones
  static Future<void> inicializar() async {
    try {
      print('üî• Inicializando Firebase...');
      
      // Inicializar Firebase Core
      await Firebase.initializeApp();
      print('‚úÖ Firebase Core inicializado');

      // Obtener instancia de Firebase Messaging
      _messaging = FirebaseMessaging.instance;
      
      // Inicializar notificaciones locales
      await _inicializarNotificacionesLocales();
      
      // Solicitar permisos
      await _solicitarPermisos();
      
      // Obtener token FCM
      await _obtenerToken();
      
      // Configurar listeners
      _configurarListeners();
      
      // Registrar token en backend
      await _registrarTokenEnBackend();
      
      print('üéâ Firebase Notificaciones configurado exitosamente');
      
    } catch (e) {
      print('‚ùå Error inicializando Firebase: $e');
    }
  }

  /// Solicitar permisos de notificaci√≥n
  static Future<void> _solicitarPermisos() async {
    try {
      NotificationSettings settings = await _messaging!.requestPermission(
        alert: true,
        announcement: false,
        badge: true,
        carPlay: false,
        criticalAlert: false,
        provisional: false,
        sound: true,
      );

      if (settings.authorizationStatus == AuthorizationStatus.authorized) {
        print('‚úÖ Permisos de notificaci√≥n concedidos');
      } else if (settings.authorizationStatus == AuthorizationStatus.provisional) {
        print('‚ö†Ô∏è Permisos provisionales concedidos');
      } else {
        print('‚ùå Permisos de notificaci√≥n denegados');
      }
    } catch (e) {
      print('‚ùå Error solicitando permisos: $e');
    }
  }

  /// Obtener token FCM del dispositivo
  static Future<String?> _obtenerToken() async {
    try {
      _token = await _messaging!.getToken();
      print('üîë Token FCM obtenido: ${_token?.substring(0, 20)}...');
      
      // Guardar token localmente
      final prefs = await SharedPreferences.getInstance();
      if (_token != null) {
        await prefs.setString('fcm_token', _token!);
      }
      
      return _token;
    } catch (e) {
      print('‚ùå Error obteniendo token FCM: $e');
      return null;
    }
  }

  /// Registrar token en el backend
  static Future<void> _registrarTokenEnBackend() async {
    try {
      if (_token == null) {
        print('‚ö†Ô∏è No hay token FCM para registrar');
        return;
      }

      // Obtener datos del usuario
      final prefs = await SharedPreferences.getInstance();
      final userDataString = prefs.getString('usuario');
      
      if (userDataString == null) {
        print('‚ö†Ô∏è No hay datos de usuario para registrar token');
        return;
      }

      final userData = jsonDecode(userDataString);
      final userId = userData['id'];

      if (userId == null) {
        print('‚ö†Ô∏è No se encontr√≥ ID de usuario');
        return;
      }

      // Enviar token al backend
      final url = Uri.parse('$baseUrl/fcm/registrar-token/');
      print('üîó URL completa: $url');
      
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: json.encode({
          'fcm_token': _token,
          'user_id': userId,
        }),
      ).timeout(Duration(seconds: 10)); // Timeout de 10 segundos

      print('üì± Respuesta del servidor: ${response.statusCode}');
      print('üì± Cuerpo de respuesta: ${response.body}');
      
      if (response.statusCode == 200) {
        final result = jsonDecode(response.body);
        if (result['success']) {
          print('‚úÖ Token FCM registrado en backend exitosamente');
        } else {
          print('‚ùå Error registrando token: ${result['message']}');
        }
      } else if (response.statusCode == 301 || response.statusCode == 302) {
        print('‚ö†Ô∏è Redirecci√≥n detectada. Verificar URL del endpoint.');
        print('üîó Headers de respuesta: ${response.headers}');
      } else {
        print('‚ùå Error HTTP registrando token: ${response.statusCode}');
        print('‚ùå Cuerpo del error: ${response.body}');
      }

    } on TimeoutException catch (e) {
      print('‚è±Ô∏è Timeout conectando al backend: $e');
      print('‚ö†Ô∏è Verifica que el backend est√© corriendo en la IP correcta');
    } catch (e) {
      print('‚ùå Error registrando token en backend: $e');
    }
  }

  /// Configurar listeners para notificaciones
  static void _configurarListeners() {
    try {
      // Cuando la app est√° en primer plano
      FirebaseMessaging.onMessage.listen((RemoteMessage message) {
        print('üì± ==> NOTIFICACI√ìN RECIBIDA EN PRIMER PLANO <==');
        print('T√≠tulo: ${message.notification?.title}');
        print('Mensaje: ${message.notification?.body}');
        print('Data: ${message.data}');
        print('From: ${message.from}');
        print('MessageId: ${message.messageId}');
        
        _mostrarNotificacionLocal(message);
      });

      // Cuando se toca una notificaci√≥n (app en background)
      FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
        print('üîî Notificaci√≥n tocada (app en background):');
        print('T√≠tulo: ${message.notification?.title}');
        print('Data: ${message.data}');
        
        _manejarNotificacionTocada(message);
      });

      // Cuando la app se abre desde una notificaci√≥n (app cerrada)
      _messaging!.getInitialMessage().then((RemoteMessage? message) {
        if (message != null) {
          print('üöÄ App abierta desde notificaci√≥n:');
          print('T√≠tulo: ${message.notification?.title}');
          print('Data: ${message.data}');
          
          _manejarNotificacionTocada(message);
        }
      });

      print('üéß Listeners de notificaciones configurados');
      
    } catch (e) {
      print('‚ùå Error configurando listeners: $e');
    }
  }

  /// Inicializar notificaciones locales
  static Future<void> _inicializarNotificacionesLocales() async {
    try {
      _localNotifications = FlutterLocalNotificationsPlugin();
      
      const AndroidInitializationSettings initializationSettingsAndroid =
          AndroidInitializationSettings('@mipmap/ic_launcher');
      
      const InitializationSettings initializationSettings =
          InitializationSettings(android: initializationSettingsAndroid);
      
      await _localNotifications!.initialize(initializationSettings);
      
      // Crear canal de notificaci√≥n para Android 8+
      const AndroidNotificationChannel channel = AndroidNotificationChannel(
        'high_importance_channel',
        'Notificaciones Importantes',
        description: 'Canal para notificaciones importantes de Trust Country',
        importance: Importance.high,
        playSound: true,
        enableVibration: true,
        showBadge: true,
      );
      
      final androidPlugin = _localNotifications!
          .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
      
      if (androidPlugin != null) {
        await androidPlugin.createNotificationChannel(channel);
        print('‚úÖ Canal de notificaci√≥n creado: ${channel.id}');
      } else {
        print('‚ö†Ô∏è No se pudo crear el canal de notificaci√≥n');
      }
      
      print('‚úÖ Notificaciones locales inicializadas');
    } catch (e) {
      print('‚ùå Error inicializando notificaciones locales: $e');
    }
  }

  /// Mostrar notificaci√≥n local cuando la app est√° en primer plano
  static Future<void> _mostrarNotificacionLocal(RemoteMessage message) async {
    try {
      print('üîî Mostrando notificaci√≥n local: ${message.notification?.title}');
      
      if (_localNotifications == null) {
        print('‚ö†Ô∏è Plugin de notificaciones locales no inicializado');
        return;
      }
      
      const AndroidNotificationDetails androidPlatformChannelSpecifics =
          AndroidNotificationDetails(
        'high_importance_channel',
        'Notificaciones Importantes',
        channelDescription: 'Canal para notificaciones importantes de Trust Country',
        importance: Importance.high,
        priority: Priority.high,
        showWhen: true,
        icon: '@drawable/ic_notification', // √çcono TC para barra de estado
        // largeIcon eliminado - no mostrar √≠cono grande de Flutter
      );
      
      const NotificationDetails platformChannelSpecifics =
          NotificationDetails(android: androidPlatformChannelSpecifics);
      
      await _localNotifications!.show(
        DateTime.now().millisecondsSinceEpoch.remainder(100000),
        message.notification?.title ?? 'Trust Country',
        message.notification?.body ?? 'Nueva notificaci√≥n',
        platformChannelSpecifics,
      );
      
      print('‚úÖ Notificaci√≥n local mostrada exitosamente');
      
    } catch (e) {
      print('‚ùå Error mostrando notificaci√≥n local: $e');
    }
  }

  /// Manejar cuando se toca una notificaci√≥n
  static void _manejarNotificacionTocada(RemoteMessage message) {
    try {
      print('üëÜ Manejando notificaci√≥n tocada');
      
      final tipo = message.data['tipo'];
      
      switch (tipo) {
        case 'cumpleanos':
          print('üéÇ Navegando a pantalla de cumplea√±os');
          // Aqu√≠ podr√≠as navegar a una pantalla espec√≠fica
          break;
        case 'cita':
          print('üìÖ Navegando a pantalla de citas');
          break;
        default:
          print('üì± Notificaci√≥n general');
      }
      
    } catch (e) {
      print('‚ùå Error manejando notificaci√≥n tocada: $e');
    }
  }

  /// Obtener token actual
  static Future<String?> obtenerToken() async {
    if (_token != null) return _token;
    return await _obtenerToken();
  }

  /// Verificar si las notificaciones est√°n habilitadas
  static Future<bool> notificacionesHabilitadas() async {
    try {
      if (_messaging == null) return false;
      
      NotificationSettings settings = await _messaging!.getNotificationSettings();
      return settings.authorizationStatus == AuthorizationStatus.authorized;
    } catch (e) {
      print('‚ùå Error verificando permisos: $e');
      return false;
    }
  }

  /// Actualizar token en backend (llamar cuando cambie el usuario)
  static Future<void> actualizarTokenEnBackend() async {
    await _registrarTokenEnBackend();
  }

  /// Enviar notificaci√≥n local de prueba
  static Future<void> enviarNotificacionLocal({required String titulo, required String mensaje}) async {
    try {
      if (_localNotifications == null) {
        print('‚ö†Ô∏è Notificaciones locales no inicializadas');
        return;
      }

      const AndroidNotificationDetails androidPlatformChannelSpecifics =
          AndroidNotificationDetails(
        'high_importance_channel',
        'High Importance Notifications',
        channelDescription: 'This channel is used for important notifications.',
        importance: Importance.max,
        priority: Priority.high,
        showWhen: false,
        icon: '@drawable/ic_notification', // √çcono TC para barra de estado
        // largeIcon eliminado - no mostrar √≠cono grande de Flutter
      );
      
      const NotificationDetails platformChannelSpecifics =
          NotificationDetails(android: androidPlatformChannelSpecifics);
      
      await _localNotifications!.show(
        0,
        titulo,
        mensaje,
        platformChannelSpecifics,
      );
      
      print('‚úÖ Notificaci√≥n local enviada: $titulo');
    } catch (e) {
      print('‚ùå Error enviando notificaci√≥n local: $e');
    }
  }
  
  /// Enviar notificaci√≥n local con delay para prueba en segundo plano
  static Future<void> enviarNotificacionLocalConDelay({required String titulo, required String mensaje, required int segundosDelay}) async {
    try {
      print('üïí Notificaci√≥n programada para $segundosDelay segundos...');
      print('üì± Puedes minimizar la app ahora para probar notificaciones en segundo plano');
      
      // Esperar el tiempo especificado
      await Future.delayed(Duration(seconds: segundosDelay));
      
      // Enviar la notificaci√≥n despu√©s del delay
      await enviarNotificacionLocal(titulo: titulo, mensaje: mensaje);
      
    } catch (e) {
      print('‚ùå Error enviando notificaci√≥n con delay: $e');
    }
  }

  /// M√©todo seguro para registrar desde pantallas existentes
  static Future<void> registrarTokenSeguro() async {
    try {
      if (_messaging == null) {
        print('‚ö†Ô∏è Firebase no est√° inicializado, omitiendo registro de token');
        return;
      }
      await _registrarTokenEnBackend();
      print('‚úÖ Token FCM registrado desde pantalla');
    } catch (e) {
      print('‚ö†Ô∏è Error registrando token (no cr√≠tico): $e');
    }
  }
}

/// Handler para notificaciones en background (debe estar fuera de la clase)
@pragma('vm:entry-point')
Future<void> firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();
  
  print('üîî Notificaci√≥n en background recibida:');
  print('T√≠tulo: ${message.notification?.title}');
  print('Mensaje: ${message.notification?.body}');
  print('Data: ${message.data}');
  
  // CR√çTICO: Android autom√°ticamente muestra la notificaci√≥n cuando la app est√° cerrada
  // Si el mensaje tiene notification payload, Android la mostrar√° autom√°ticamente
  print('‚úÖ Notificaci√≥n procesada en background - Android la mostrar√° autom√°ticamente');
}
